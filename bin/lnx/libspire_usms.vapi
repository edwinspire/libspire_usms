/* libspire_usms.vapi generated by valac 0.16.1, do not modify. */

namespace edwinspire {
	namespace uSMS {
		[CCode (cheader_filename = "libspire_usms.h")]
		public class AddressTable : edwinspire.uSMS.PostgreSQLConnection {
			public AddressTable ();
			public string fun_view_address_byid_xml (int idaddress, bool fieldtextasbase64 = true);
		}
		[CCode (cheader_filename = "libspire_usms.h")]
		public class Device : edwinspire.GSM.MODEM.ModemGSM {
			public int IdPort;
			public uint TimeWindowSleep;
			public Device ();
			public void DetectCallID (string phone);
			public void Kill ();
			public void SetPort (edwinspire.uSMS.SerialPortConf sp);
			[Description (blurb = "Inserta un evento en la bitacora del proceso", nick = "log")]
			public int64 log (GLib.LogLevelFlags level, string log);
			public edwinspire.uSMS.ProcessCtrl Ctrl { get; set; }
		}
		[CCode (cheader_filename = "libspire_usms.h")]
		public class PhoneTable : edwinspire.uSMS.PostgreSQLConnection {
			public PhoneTable ();
			public static edwinspire.uSMS.XmlRow PhoneTableRowNodeXml (edwinspire.uSMS.PhoneTableRow row);
			public edwinspire.uSMS.PhoneTableRow[] byIdContact (int idcontact);
			public string byIdContactXml (int idcontact);
			public string byIdContact_Xml (int idcontact, bool fieldtextasbase64 = true);
			public string byId_Xml (int idphone, bool fieldtextasbase64 = true);
			public string fun_phones_table_xml (int inidphone, int inidcontact, bool inenable, string inphone, int intypephone, int inidprovider, string inphone_ext, int inidaddress, int inubiphone, string innote, string ints, bool fieldtextasbase64 = true);
			public string fun_phones_table_xml_from_hashmap (Gee.HashMap<string,string> data, bool fieldtextasbase64 = true);
		}
		[CCode (cheader_filename = "libspire_usms.h")]
		public class PostgreSQLConnection : edwinspire.pgSQL.PostgreSqldb {
			public PostgreSQLConnection ();
			public void GetParamCnx ();
		}
		[CCode (cheader_filename = "libspire_usms.h")]
		public class PostgresuSMS : edwinspire.uSMS.PostgreSQLConnection {
			public PostgresuSMS ();
			public int fun_currentportsproviders_insertupdate (int inidport, string inport, string incimi, string inimei);
			public bool fun_portmodem_update (int inidport, string inport, string incimi, string inimei, string inmanufacturer, string inmodel, string inrevision);
		}
		[CCode (cheader_filename = "libspire_usms.h")]
		public class ProcessControldb : GLib.Object {
			public edwinspire.uSMS.ProcessCtrl Ctrl;
			public string Date;
			public int Id;
			public string Note;
			public ProcessControldb (int id = 0, edwinspire.uSMS.ProcessCtrl ctrl = ProcessCtrl.None, string note = "", string date = "2000-01-01 00:00");
			public ProcessControldb.from_string (string? id, string? ctrl, string? note = "", string? date = "2000-01-01 00:00");
		}
		[CCode (cheader_filename = "libspire_usms.h")]
		public class ProviderTable : edwinspire.uSMS.PostgreSQLConnection {
			public ProviderTable ();
			public string fun_provider_edit_xml (int inidprovider, bool inenable, string incimi, string inname, string innote, string ints, bool fieldtextasbase64 = true);
			public string fun_provider_edit_xml_from_hashmap (Gee.HashMap<string,string> data, bool fieldtextasbase64 = true);
			public string fun_view_provider_table_xml (bool fieldtextasbase64 = true);
			public string idname_Xml (bool fieldtextasbase64 = true);
		}
		[CCode (cheader_filename = "libspire_usms.h")]
		public class SMSOutRow : edwinspire.GSM.MODEM.Submit {
			public SMSOutRow ();
			public int MaxSlices { get; set; }
			public edwinspire.PDU.DCS_MESSAGE_CLASS MessageClass { get; set; }
			public bool StatusReport { get; set; }
			public int attempts { get; set; }
			public GLib.DateTime dateload { get; set; }
			public GLib.DateTime dateprocess { get; set; }
			public GLib.DateTime datetosend { get; set; }
			public bool enableMessageClass { get; set; }
			public int flag1 { get; set; }
			public int flag2 { get; set; }
			public int flag3 { get; set; }
			public int flag4 { get; set; }
			public int flag5 { get; set; }
			public int idphone { get; set; }
			public int idport { get; set; }
			public int idprovider { get; set; }
			public int idprovidersent { get; set; }
			public int idsmstype { get; set; }
			public int maxtimelive { get; set; }
			public int messageclass { get; set; }
			public string note { get; set; }
			public string phone { get; set; }
			public int priority { get; set; }
			public int process { get; set; }
			public int retryonfail { get; set; }
			public int slices { get; set; }
			public int slicessent { get; set; }
		}
		[CCode (cheader_filename = "libspire_usms.h")]
		public class SQLFunReturn : GLib.Object {
			public string Msg;
			public int Return;
			public SQLFunReturn (int r = 0, string message = "");
			public string Xml ();
		}
		[CCode (cheader_filename = "libspire_usms.h")]
		public class SerialPortConf : edwinspire.Ports.Configure {
			public SerialPortConf ();
			public SerialPortConf.with_args (int id, bool enable, string port, int baudrate, int databits, edwinspire.Ports.Parity parity, edwinspire.Ports.StopBits stopbits, edwinspire.Ports.HandShaking HS, string note = "", Gee.ArrayList<GLib.LogLevelFlags> llevel);
			public int Id { get; set; }
			public Gee.ArrayList<GLib.LogLevelFlags> LogLevel { get; set; }
			public string Note { get; set; }
		}
		[CCode (cheader_filename = "libspire_usms.h")]
		public class TableCallIn : edwinspire.uSMS.PostgresuSMS {
			public TableCallIn ();
			public int fun_incomingcalls_insert_online (int inidport, edwinspire.uSMS.CallAction incallaction, string inphone, string innote = "");
		}
		[CCode (cheader_filename = "libspire_usms.h")]
		public class TableContacts : edwinspire.uSMS.PostgreSQLConnection {
			public TableContacts ();
			public Gee.HashMap<int,string> NameAndId_All ();
			public string NameAndId_All_Xml (bool fieldtextasbase64 = true);
			public string byId_Xml (int idcontact, bool fieldtextasbase64 = true);
			public string fun_contacts_edit_xml (int inidcontact, bool inenable, string intitle, string infirstname, string inlastname, int ingender, string inbirthday, int intypeofid, string inidentification, string inweb, string inemail1, string inemail2, int inidaddress, string innote, bool fieldtextasbase64 = true);
			public string fun_contacts_edit_xml_from_hashmap (Gee.HashMap<string,string> data, bool fieldtextasbase64 = true);
		}
		[CCode (cheader_filename = "libspire_usms.h")]
		public class TableIncomingCalls : edwinspire.uSMS.PostgreSQLConnection {
			public TableIncomingCalls ();
			public string fun_view_incomingcalls_xml (string datestart, string dateend, bool fieldtextasbase64 = true);
		}
		[CCode (cheader_filename = "libspire_usms.h")]
		public class TablePostgres : GLib.Object {
			public TablePostgres ();
			public static int64 InsertRow (edwinspire.uSMS.TableRowPostgres row);
			public static edwinspire.uSMS.TableRowPostgres LastRowEnabled ();
			public static string LastRowEnabledXML ();
			public static int64 UpdateFromWeb (Gee.HashMap<string,string> Form);
			public static int64 UpdateRow (edwinspire.uSMS.TableRowPostgres row);
		}
		[CCode (cheader_filename = "libspire_usms.h")]
		public class TableProcessControl : GLib.Object {
			public TableProcessControl ();
			public static Gee.ArrayList<edwinspire.uSMS.ProcessControldb> All ();
			public static int64 Insert (edwinspire.uSMS.ProcessControldb row);
			public static edwinspire.uSMS.ProcessControldb Last ();
			public static edwinspire.uSMS.ProcessControldb RowById (int Id);
			[Description (blurb = "", nick = "Update row")]
			public static bool Update (edwinspire.uSMS.ProcessControldb contrl);
		}
		[CCode (cheader_filename = "libspire_usms.h")]
		public class TableProvider : edwinspire.uSMS.PostgresuSMS {
			public TableProvider ();
			public int IdProviderFromCIMI (string cimi);
		}
		[CCode (cheader_filename = "libspire_usms.h")]
		public class TableSMSIn : edwinspire.uSMS.PostgreSQLConnection {
			public TableSMSIn ();
			public int fun_smsin_insert (int inidport, edwinspire.GSM.MODEM.SMS_Status instatus, edwinspire.PDU.Datetime indatesms, string inphone, string inmsj, string innote = "");
			public string fun_view_smsin_table_filter_xml (string start, string end, int rows, bool fieldtextasbase64 = true);
		}
		[CCode (cheader_filename = "libspire_usms.h")]
		public class TableSMSOut : edwinspire.uSMS.PostgresuSMS {
			public TableSMSOut ();
			public edwinspire.uSMS.SMSOutRow ToSend (int IdProvider);
			public int fun_smsout_insert (int inidphone, string inphone, string inmessage, int inidprovider = 0, int inidsmstype = 0, int inpriority = 5, GLib.DateTime indatetosend = new GLib.DateTime.now_local (), bool inenablemsgclass = false, edwinspire.PDU.DCS_MESSAGE_CLASS inmsgclass = edwinspire.PDU.DCS_MESSAGE_CLASS.TE_SPECIFIC, string innote = "");
			public int fun_smsout_updatestatus (int inidsmsout, edwinspire.uSMS.ProcessSMSOut inprocess, int inidprovidersent, int inslices, int inslicessent, string innote = "");
			public string fun_view_smsout_table_filter_xml (string start, string end, int rows, bool fieldtextasbase64 = true);
		}
		[CCode (cheader_filename = "libspire_usms.h")]
		public class TableSerialPort : GLib.Object {
			public TableSerialPort ();
			public static Gee.ArrayList<edwinspire.uSMS.SerialPortConf> All ();
			public static string AllXml ();
			public static bool Delete (uint IdPort);
			public static Gee.ArrayList<edwinspire.uSMS.SerialPortConf> Enables ();
			public static int64 Insert (edwinspire.uSMS.SerialPortConf row);
			public static int64 InsertUpdate (edwinspire.uSMS.SerialPortConf row);
			public static int64 InsertUpdateFromWeb (Gee.HashMap<string,string> postData);
			public static bool Update (edwinspire.uSMS.SerialPortConf row);
		}
		[CCode (cheader_filename = "libspire_usms.h")]
		public class XmlDatas : GLib.Object {
			public bool FieldTextToBase64;
			public XmlDatas ();
			public static Xml.Node* Node (string Name = "nodeName");
			public static string StringToBase64 (string textstring);
			public static Xml.Doc* XmlDocBuild (Xml.Node* rootNode);
			public static string XmlDocToString (Xml.Node* rootNode);
		}
		[CCode (cheader_filename = "libspire_usms.h")]
		public class XmlRow : edwinspire.uSMS.XmlDatas {
			public string Name;
			public XmlRow ();
			public Xml.Node* Row ();
			public void addFieldBool (string name, bool value);
			public void addFieldDouble (string name, double value);
			public void addFieldInt (string name, int value);
			public void addFieldInt64 (string name, int64 value);
			public void addFieldString (string name, string value, bool asBase64 = false);
			public void addFieldUint (string name, uint value);
			public void clear ();
		}
		[CCode (cheader_filename = "libspire_usms.h")]
		public class uSMSDataBase : GLib.Object {
			public uSMSDataBase ();
			public int64 Insert (edwinspire.uSMS.SerialPortConf row);
			public void Open ();
			public bool isOpen { get; private set; }
		}
		[CCode (cheader_filename = "libspire_usms.h")]
		public class uSMSServer : GLib.Object {
			public uSMSServer ();
			public void RequestVirtualPageHandler (edwinspire.uHttp.uHttpServer server, edwinspire.uHttp.Request request, GLib.DataOutputStream dos);
			public static edwinspire.uHttp.Response ResponseToVirtualRequest (edwinspire.uHttp.Request request);
			public void Run ();
			public static Gee.HashMap<string,string> VirtualUrls ();
		}
		[CCode (cheader_filename = "libspire_usms.h")]
		public struct PhoneTableRow {
			public int IdPhone;
			public int IdContact;
			public bool Enable;
			public string Phone;
			public int Type;
			public int IdProvider;
			public string Note;
			public double GeoX;
			public double GeoY;
			public string IdAddress;
			public string PhoneExt;
			public int UbiPhone;
			public string Address;
			public string TimeStamp;
			public PhoneTableRow ();
		}
		[CCode (cheader_filename = "libspire_usms.h")]
		public struct TableRowPostgres {
			public edwinspire.pgSQL.ConnectionParameters Parameters;
			public string Note;
			public int64 Id;
			public bool Enable;
			public TableRowPostgres ();
		}
		[CCode (cheader_filename = "libspire_usms.h")]
		public enum CallAction {
			Ignore,
			Answer,
			Refuse
		}
		[CCode (cheader_filename = "libspire_usms.h")]
		[Description (blurb = "Control del proceso del servidor usmsd", nick = "Proccess Control")]
		public enum ProcessCtrl {
			[Description (blurb = "", nick = "None")]
			None,
			[Description (blurb = "", nick = "Run")]
			Run,
			[Description (blurb = "", nick = "Running")]
			Running,
			[Description (blurb = "", nick = "Sleep")]
			Sleep,
			[Description (blurb = "", nick = "Sleeping")]
			Sleeping,
			[Description (blurb = "", nick = "Restart")]
			Restart,
			[Description (blurb = "", nick = "Restarting")]
			Restarting,
			[Description (blurb = "", nick = "Kill")]
			Kill,
			[Description (blurb = "", nick = "Killed")]
			Killed
		}
		[CCode (cheader_filename = "libspire_usms.h")]
		public enum ProcessSMSOut {
			None,
			Locked,
			Sent,
			Fail,
			Disallowed,
			WaitingToBeSentByNextPort,
			SentIncomplete,
			LifetimeExpired,
			AllAttemptsFailToDeliverAutoProvider,
			AllAttemptsFailDelivery,
			AwaitingDeliveryRetry
		}
		[CCode (cheader_filename = "libspire_usms.h")]
		public const string FILECONF;
		[CCode (cheader_filename = "libspire_usms.h")]
		public const string VERSION;
	}
}
